program main
  use amsta01maillage
  use amsta01sparse
  use amsta01probleme
  use amsta01solveur
  
  implicit none
  type(maillage) :: mail
  type(probleme) :: pb
  type(matsparse) :: Kt, Mt
  real(kind=8) :: erreur
  real(kind=8), dimension(:), pointer :: residu

  ! lecture du maillage
  mail = loadFromMshFile("./testpart.msh")
  ! construction des donnees sur les triangles
  call getTriangles(mail)
  ! creation du probleme
  call loadFromMesh(pb,mail)
  ! assemblage des matrices elements finis
  call assemblage(pb)
  ! pseudo-elimination des conditions essentielles
  call pelim(pb,mail%refNodes(1))

  ! calcul du residu theorique
  allocate(residu(mail%nbNodes))
  residu=pb%felim-pb%p_Kelim*pb%uexa
  erreur=dsqrt(dot_product(residu,residu))
  print *, "residu theorique=", erreur

  ! resolution du systeme lineaire
  call solveJacobi(pb)

  ! calcul du residu
  residu=pb%felim-pb%p_Kelim*pb%u
  erreur=dsqrt(dot_product(residu,residu))
  print *, "residu=", erreur

  ! calcul de l'erreur L2
  erreur=dsqrt(dot_product(pb%uexa-pb%u,pb%uexa-pb%u))
  print *, "||u-uexa||_2=", erreur

  ! sauvegarde de la solution et de la solution theorique
  call saveToVtu(pb%mesh,pb%u,pb%uexa)
end program
